
1.
    The code snippet below doesn't have any dependencies strictly speaking. However, the order of execution still matters.
    Mainly because all original values (except for x[0]) have to be used in the body of the for loop and if execution is not
    exactly in order, the necessary values of x[i] will be overwritten.

    I suggest replacing

    ````
    for (int i=0; i < n-1; i++) {
        x[i] = (y[i] + x[i+1]) / 7;
    }
    ````

    with

    ````
    for (int i=0; i < n-1; i++) {
        y[i] = (y[i] + x[i+1]) / 7;
    }
    ````

    if y is not needed after the for loop, because now the order of execution doesn't matter at all. Otherwise I would
    allocate a new array to hold the answers. Then `#pragma omp for` can be used

2.
    No dependencies
    replace
    ````
    for (int i=0; i < n; i++) {
        a = (x[i] + y[i]) / (i+1);
        z[i] = a;
    }

    f = sqrt(a + k);
    ````

    with

    ````
    #pragma omp for
    for (int i=0; i < n; i++) {
        z[i] = (x[i] + y[i]) / (i+1);
    }

    f = sqrt(z[n-1] + k);
    ````

3.
    No dependencies
    use omp for
    ````
    #pragma omp parallel for
    for (int i=0; i < n; i++) {
       x[i] = y[i] * 2 + b * i;
    }

    #pragma omp parallel for
    for (int i=0; i < n; i++) {
       y[i] = x[i] + a / (i+1);
    }
    ````
