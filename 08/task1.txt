1.
    i-th step requires that the first command of the i-1 th step has already been executed. This may not (but could) be
    the case. In this case this can be solved by writing two for loops: first one withoug `- a[i-1]` and then iterate
    over b[i] again and subtract a[i-1] each time (both loops can be parallel).
    -> race condition

2.
    First for loop works as expected (no race-conditions - fully disconnected dependency graph) since no iteration
    depends on another.
    second for loop doesn't have the same problem as example 1. because a[i] doesn't get changed in the body of the loop

3.
    Each iteration is independent of all others, so everything should work as expected if each thread has a separate
    variable x! But it looks as if the variable x is not private for each thread, so between the two commands in the
    body of the for loop, x could (and most likely will at some point) get changed by another thread. So the results
    will be inconsistent.

    Simple fix: make x private and use the `nowait` clause for performance

4.
    In principle the dependency graph is fully disconnected so everything is fine. The problem is the last command.
    Depending on which thread finished last a[0] will be different.
    Simple fix: replace `a[0] = x` by `a[0] = a[N - 1] + 7` if a[0] should be "the last" x in from the loop.

5.
    In principle every iteration depends on all iterations before. But + is commutative, hence order doesn't matter and
    there are no race conditions as long as scheduling makes sure that sum can only be modified by one thread at a time
    which should be the case (otherwise two threads might try to add b[i] to sum at the same time and effectively only
    one addition survives). But it is important to note that this only works because we use +. If we replace + with /
    there are race conditions.


